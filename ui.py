import io
import uuid
import requests
import os
import streamlit as st
import matplotlib.pyplot as plt
import pandas as pd
from dotenv import load_dotenv
from azure.storage.blob import BlobServiceClient
from azure.core.exceptions import AzureError
from azure.core.exceptions import ResourceExistsError
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas

# ===== Konfiguracja =====:
load_dotenv()
AZURE_CONNECTION_STRING = os.getenv('AZURE_CONNECTION_STRING')
CONTAINER_NAME = os.getenv('CONTAINER_NAME')
AZURE_FUNCTION_URL = os.getenv('AZURE_FUNCTION_URL')

# ===== Funkcje pomocnicze =====:
def check_connection():
    try:
        blob_service_client = BlobServiceClient.from_connection_string(AZURE_CONNECTION_STRING)
        container_client = blob_service_client.get_container_client(CONTAINER_NAME)
        container_client.get_container_properties()
        return True
    except AzureError:
        return False

def get_container_stats_and_data(container_client):
    total_size_bytes = 0
    blob_count = 0
    file_data = []
    for blob in container_client.list_blobs():
        size_mb = blob.size / (1024 * 1024)
        total_size_bytes += blob.size
        blob_count += 1
        file_data.append({"Nazwa pliku": blob.name, "Rozmiar (MB)": round(size_mb, 2)})
    return blob_count, total_size_bytes / (1024 * 1024), file_data

def generate_pdf(data_list):
    buffer = io.BytesIO()
    c = canvas.Canvas(buffer, pagesize=letter)
    width, height = letter

    c.setFont("Helvetica-Bold", 14)
    c.drawString(50, height - 50, "Raport plik√≥w w kontenerze Azure")

    c.setFont("Helvetica", 11)
    y = height - 90
    c.drawString(50, y, "Nazwa pliku")
    c.drawString(400, y, "Rozmiar (MB)")
    y -= 15

    for item in data_list:
        if y < 50:
            c.showPage()
            y = height - 50
        c.drawString(50, y, str(item["Nazwa pliku"]))
        c.drawString(400, y, f"{item['Rozmiar (MB)']:.2f}")
        y -= 15

    c.save()
    buffer.seek(0)
    return buffer

def generate_blob_name(original_filename):
    prefix = str(uuid.uuid4()).replace("-", "")[:6]
    return f"{prefix}-{original_filename}"

def trigger_azure_function():
    try:
        # Inicjalizacja klienta kontenera
        blob_service_client = BlobServiceClient.from_connection_string(AZURE_CONNECTION_STRING)
        container_client = blob_service_client.get_container_client(CONTAINER_NAME)

        # Liczba plik√≥w Przed analizƒÖ
        before_count = sum(1 for _ in container_client.list_blobs())

        # Wywo≈Çanie funkcji Azure
        response = requests.get(AZURE_FUNCTION_URL)  # lub .post() je≈õli Twoja funkcja wymaga POST

        if response.status_code != 200:
            return None, f"B≈ÇƒÖd podczas wywo≈Çania funkcji Azure: {response.status_code}"

        # Liczba plik√≥w Po analizie
        after_count = sum(1 for _ in container_client.list_blobs())

        return {
            "before": before_count,
            "after": after_count,
            "difference": before_count - after_count
        }, None

    except Exception as e:
        return None, str(e)
    

# ===== Nag≈Ç√≥wek z autorem =====:
st.markdown("### **Praca in≈ºynierska:** System rozpoznawania i usuwania duplikat√≥w plik√≥w przechowywanych w chmurze.")
st.markdown("###### **Autor:** Micha≈Ç Tkacz")
st.markdown("###### **Numer indeksu:**  29395 ")
st.markdown("-------------------------------------------------------------------------------------")

# ===== Aplikacja Streamlit =====:
st.title("‚òÅÔ∏èüì¶Uploader plik√≥w do Azure Blob Storage:")
st.markdown("""Prosta i wydajna aplikacja do przesy≈Çania plik√≥w do Azure Blob Storage. 
            PrzeciƒÖgnij i upu≈õƒá pliki lub wybierz je rƒôcznie, a aplikacja automatycznie przeka≈ºe je do wskazanego kontenera w chmurze Microsoft Azure.""")
    # Konfiguracja strony
st.set_page_config(
    page_title="Azure Uploader Micha≈Ç Tkacz",
    page_icon="‚òÅÔ∏è"
)
st.markdown("-------------------------------------------------------------------------------------")

# ===== Sprawdzanie po≈ÇƒÖczenia: =====:
st.markdown("### üîç Status po≈ÇƒÖczenia z Azure Blob Storage:")
if check_connection():
    st.success("üü¢ Po≈ÇƒÖczenie z Azure Blob Storage dzia≈Ça.")
    blob_service_client = BlobServiceClient.from_connection_string(AZURE_CONNECTION_STRING)
    container_client = blob_service_client.get_container_client(CONTAINER_NAME)
else:
    st.error("üî¥ Brak po≈ÇƒÖczenia z Azure Blob Storage.")
    st.stop()
st.markdown("-------------------------------------------------------------------------------------")

st.markdown("### üì§ Przesy≈Çanie plik√≥w:")
st.markdown("""
W tej sekcji mo≈ºesz wybraƒá i przes≈Çaƒá pliki do kontenera Azure Blob Storage.
- Obs≈Çugiwane jest przesy≈Çanie wielu plik√≥w jednocze≈õnie.
- Ka≈ºdy plik otrzyma unikalnƒÖ nazwƒô, aby uniknƒÖƒá nadpisania.
- Po przes≈Çaniu otrzymasz potwierdzenie dla ka≈ºdego pliku.
""")
uploaded_files = st.file_uploader("Wybierz pliki do analizy:",accept_multiple_files=True)

if st.button("Wy≈õlij do chmury"):
    if not uploaded_files:
        st.warning("Najpierw wybierz pliki.")
    else:
        for file in uploaded_files:
            success = False
            attempts = 0
            max_attempts = 5

            while not success and attempts < max_attempts:
                blob_name = generate_blob_name(file.name)
                blob_client = container_client.get_blob_client(blob_name)

                try:
                    blob_client.upload_blob(file, overwrite=False)
                    st.success(f"‚úÖ Plik '{file.name}' wys≈Çany jako '{blob_name}'.")
                    success = True
                except ResourceExistsError:
                    attempts += 1
                    st.warning(f"‚ö†Ô∏è Nazwa '{blob_name}' ju≈º istnieje. Pr√≥ba {attempts} z {max_attempts}...")

            if not success:
                st.error(f"‚ùå Nie uda≈Ço siƒô przes≈Çaƒá pliku '{file.name}' po {max_attempts} pr√≥bach.")
st.markdown("-------------------------------------------------------------------------------------")

# ===== Statystyki i wykres =====:
st.header("üìä Statystyki kontenera:")

blob_count, total_size_mb, file_data = get_container_stats_and_data(container_client)

st.write(f"**Liczba plik√≥w**: {blob_count}")
st.write(f"**≈ÅƒÖczny rozmiar**: {total_size_mb:.2f} MB")

plt.style.use('dark_background')
fig, ax = plt.subplots()
ax.bar(["Liczba plik√≥w", "Rozmiar (MB)"], [blob_count, total_size_mb], color=["blue", "green"],width=0.5)
ax.set_ylabel("Warto≈õƒá")
ax.set_title("Statystyki kontenera Azure Blob Storage")
st.pyplot(fig)
st.markdown("-------------------------------------------------------------------------------------")

# ===== PrzeglƒÖdarka plik√≥w w kontenerze =====:
st.header("üóÇÔ∏è Lista plik√≥w w kontenerze")

with st.expander("Kliknij, aby wy≈õwietliƒá listƒô plik√≥w:"):
    if file_data:
        df_files = pd.DataFrame(file_data)
        st.dataframe(df_files, use_container_width=True)
    else:
        st.info("Brak plik√≥w w kontenerze.")
st.markdown("-------------------------------------------------------------------------------------")

# ======= Wywo≈Çanie Azure Function =======:
st.header("‚öôÔ∏èüóëÔ∏è Analiza i usuwanie duplikat√≥w:")
st.markdown("Kliknij przycisk poni≈ºej, aby uruchomiƒá Azure Function i przeprowadziƒá analizƒô oraz usunƒÖƒá duplikaty z kontenera.")

if st.button("Dokonaj analizy i usu≈Ñ duplikaty"):
    result, error = trigger_azure_function()

    if error:
        st.error(f"‚ùå WystƒÖpi≈Ç b≈ÇƒÖd: {error}")
    else:
        st.success("‚úÖ Analiza zako≈Ñczona pomy≈õlnie.")
        st.info(f"üìÇ Plik√≥w przed analizƒÖ: **{result['before']}**")
        st.info(f"üìÅ Plik√≥w po analizie: **{result['after']}**")
        st.info(f"üóëÔ∏è Usuniƒôto duplikat√≥w: **{result['difference']}**")
st.markdown("-------------------------------------------------------------------------------------")

# ===== Pobieranie CSV =====: 
st.header("üì• Generowanie i pobieranie raport√≥w z chmury")
st.markdown("Wygeneruj i pobierz raport CSV lub PDF zawierajƒÖcy listƒô plik√≥w zapisanych w Azure Blob Storage.")
df = pd.DataFrame(file_data)
csv_buffer = io.StringIO()
df.to_csv(csv_buffer, index=False)

st.download_button(
    label="üì• Pobierz raport CSV",
    data=csv_buffer.getvalue(),
    file_name="raport_blob.csv",
    mime="text/csv"
)

# ===== Pobieranie PDF =====:
pdf_buffer = generate_pdf(file_data)

st.download_button(
    label="üìÑ Pobierz raport PDF",
    data=pdf_buffer,
    file_name="raport_blob.pdf",
    mime="application/pdf"
)
st.markdown("-------------------------------------------------------------------------------------")